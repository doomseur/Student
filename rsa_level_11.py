
import binascii
import gmpy2

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16)

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8")



from functools import reduce
def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod



def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

# copied from : https://www.rosettacode.org/wiki/Chinese_remainder_theorem#Python_3.6 that implement the chinese remainder theorem.


## -------------------------------------------------------------------------

N = 25601081622800154604549941267957556134455650842506499658603102891643401651348747767414449578328164107622688433747072378842165816256618240895510145167461862482628550794982299239629656890894547227915236009612296432744185205198920264639850870933932377480541689269061625301115683579980881550277340487413315740421970669180712693415647652710030237423848134531688349827849408597551724711356306148798870631200208650058901068544553433340883542197838896836783372668017286824793419377423550379378097828537762044377584560338392966233826760480039964945830050175730610082714576603216528553698653067347469654541732857998113151465751
e = 65537

dp = 152244367079401291358716469487584150991338743989392990770913626288139830903544366284978873842165797802924783266589136772176969547853810132758515251384877814239456989641537309467459189296399458554310236664344352802881532047849722063137221142352957646714675083505704164554173755971781242136342727195650051929435
c = 12197258568853253547597040581799946041585986603548186383428773143700443084556162229874361765452507412066554533559769888691295815764576474732238999342288173330325352937584949613008563970193717161361539720499836980797409433259876708192396714875184109702115953317136419961350534704241826643935659625518719884048804599520100706583765280609694145787711412815948671377833129126071454424282099361050479569057271974367819833668852729889383791011872438269112628196219820580116434335242272832914188310014441732301910630472073299647433186769498080029754149537819245807726617816718620076398309880611122566595761613531977918779273

# ## --------------------------------------------------------------------------
# dP = (1/e) mod (p-1)
# dQ = (1/e) mod (q-1)
# qInv = (1/q) mod p
# ## --------------------------------------------------------------------------

# BigCipher =  [c1,c2,c3]
# BigN = [n1,n2,n3]
# BigE = [e1,e2,e3]
# https://www.di-mgt.com.au/crt_rsa.html
#https://di-mgt.com.au/crt.html

# chinese_result = chinese_remainder(BigN,BigCipher)
cube_root = gmpy2.iroot(c,e)
print(int(gmpy2.iroot(c,e)[0]))

print( int2string( cube_root[0] ) )



