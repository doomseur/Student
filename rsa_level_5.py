## Commands to generate keys with openssl from commandline.. not part of this pythonj code.
## openssl genrsa -out mykey.pem
## openssl rsa -in mykey.pem -pubout > mykey.pub
## -------------------------------------------------------------------------

## To run type python rsa.py from the commandline (assuming you've pythonh installed
import binascii				

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16)

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8")

# # -------------------------------------------------------------------------
# n = 23516695565660963250242846975094031309572348962900032827958534374248114661507001374384417953124930587796472484525315334716723068326965228898857733318407681656604325744994115789416012096318656034667361976251100005599211469354510367804546831680730445574797161330145320706346512982316782618118878428893337849886890813813050423818145497040676697510093220374542784895778086554812954376689653727580227087363619223145837820593375994747273662064715654881379557354513619477314410917942381406981452545764657853425675230343749326640073923166795823683203941972393206970228647854927797483660176460658959810390117898333516129469397
# e = 65537
# d = 9587600726595591453426898215169101767863399178169979967502694355028996988583633210586039386751682566723132708455252764519220038491664005843242439790264046968625524201298469258242007220372280857992847470031480553726983707671745159488070659256258857978134570602562717609180653377092666963295822401721181836384326336158085408894694549470434424808812412260714422693522311366681659987060925945689943522825747715934700712908720597323076354591388316712970722935035250113120539406041972135508540472211484760814740089404942374666334486855389174327639061106567747152104666795257954039030591097174242386069752606041990644663125
dp = 1773866135293945458650606659967376768479853354798205505926578632915333539903357890260215965940940766548344180309223167345247940198199013532903029896549971209908039241113252707919629629337895905532939161172648104970277846713071982622558420220505110955098415853869774113380554829745277553298891557215897116769
dq = 16347740812894503403712423672654444669530920472208797803665993960391586227449959196645900003458629868855939351202369996011540095922292746578891719396733741037038671271672995755493618039875576148888210813721562678209646202536778928064483731718316903925098423712814078626664762373015567892204457096563945050397
p = 178303473786440649576050320052579710545803909989892629205383717584926708902831849776048732760539010762697595927799936684517659903020504217647033543451220035557888294087176752636393814444659024479926738965907728305885121533795396510942655193238103461141541226710219917283161689995423704003910208566347008192777
pinv = 52630128849197720680110472750445748362139896176637531822954326517425311680825011848954897216473363639703824050855325538315083014164303720747822395846650319695987688095158291151432519169084976930868513752588843713777689684275678356428411139716649262621622630997667298885499028563774054074332173540631319889597
q = 177704742022668281567275022430710622044625631943464584783356816417678451913814558943536631037762187048467689046234818780661519865062083219860810518179422654892088803969419990517131405785258854547965943290573901682173757368660288706014607783317852866568116668579647747712013357379386510690231133643640946552973
qinv = 125496020857340618196277467222560283660900711303887368456426113439542149083570089122371450654613560708642271914201563769861679957096301702280557251661400261492798741353567063566155829049341500619204353629584549900179004920653223519411783060452352992381122206770893349104129009388564667579089451723604618440661
# # message =b"RSA isn't really that hard" ## b before the string to says its a byte string
# ## --------------------------------------------------------------------------
# to get n compute p and q
n = p*q
# try to compute d (but it's not possible)
# dp = d (mod p - 1 )
# dq = d (mod q - 1 )
# qinv = q**-1 (mod p )
# m = c**dp (mod p)
# m2 = q**-1 ( mod q)
# d =  dp  %  (p-1)
# d = dp - (% p -1 )
# d = dq % q/1
############### notes that i take from mark
# m1 = c**dp (mod p)
# m2 = c**dq (mod q )
# h = qinv (m1 - m2) mod p
# m = m2 - h
# and it's not a good way to search d because we can't get d
################################################

# print("the value of d is  : "+ str(d) + "\n")
## ----- convert message to an int then encrypt ------------
# m = string2int(message)
# ciphertext = pow(m, e, n)    ## encrypt
# print (ciphertext)
ciphertext =1388762168166138453533502616535682311951662267796048439821372408514940452694372071133694678245859456415197350818844276387350533386163112380861811751402336635782785232530966339596198327482130002361308263664042358292425147457255505567604410008496199212314343371169549624681927057257495930259138537298520078715021539399084541293912853620643211368004457657505213763568639450075510208834704577814321673791370846192405275347289307606311671974787456421561549138384739624650167355754827475547501943429992429550124101325788544890357396437738989658781888433583926568899431456535167649223812165614500609693719689242432567228419

# pow(ciphertext,d,n)
# modulus is always  the last things to be interpreted

# m1 = ciphertext**dp % p
m1 = pow(ciphertext,dp,p)
# m2 = ciphertext**dq % q
# h = qinv (m1 - m2)  % p
# m = m2 - h

# m = c*d  % p*q


from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

# pubkey = "MIIEpQIBAAKCAQEAzGm6Ogrmlf4OSPDQ5nUIiDAJeR9wHdhce7m3NprE3QQqggdrK/itQlqfRxqTP8uFDzuvLCHkiBIkWXiB9uYx4nVP+y5Db0p8cA453Xc2wvpYO8m/6n3VFkAQyzIs7vSr77KqVyPvRzSn9OAjn9FEg1Z7TEmcbkfTo39S1urTBaTTvffwULIaEu/QWcVFnwjPAtVd0vwbgvTMIq09jiBQ+yi/AM8bqfPPG+2XVODk40f4ppX5IRngjjyR+2mXaK95hcv/EHNOSXkHGfvaJfLSbMtCKvVcPiajEZkQirq9PD/9VN8iAz30PoA5ok5NURhY8veU+rTFoZG3YHk7N6fhjwIDAQABAoIBAQDKgdvKcM4rvnssa9ao2TzQnrZj1m9eQeCtejk10XJCe0QZeXwFHeGXoOu2p29Ffjyd8MUD9bfPzhlQwgAPN9InxYytDRIliSdqY82Tx+zqkNUktiR5DJwz5Ng+VcEKIj7LwrbaiXEdm97gy8S/KbS0YNLZqvtcja/vg83vuMfCB9mz72vetpGhXQ9zRR4w89XjfEaIG280vPL3dmZ2I2YqlXpc6AggybdJpuJ/SNXhhKmRE28SrG8/yvy+NJeykgW5RXuDnBLJD5KlNANxl6ly1HKYTN6S7tP0BQDToqIapYjcKdxAsoOvUYd6hrdmqGgDbvI4XIZ4AMfQIjHr8s4RAoGBAOVAAW2pPC/45qNHYXHJ/vVHZD0UxE0tvsc2sHS5AT44Seb3hPwQQnSvE8y+tS2XioTDq1mYHE719V2KHJ5aciWkhuDeNn4FdSvMnz+0NawDwMSTDXyDvDlAA7PsA+8V65tDFDcABQPvKz5GK4bYbTIDFrgfgbibYtOrfnT3UcILAoGBAORDztBCPks5h4dVIkw52AYp/mNSex9sQsmkUqeFNMoz/sEgUJf7uRjNHP6R3iFB32WvVrj3e1ddTG5cHSc1DBQ8UuAxZzz14VFLvhYUvG+rHAXyDzqhNvZVjuBR5ErMD6bJ1r7HQ0ydceV15femeoBXEcnIcZ1FXjKeGDxltnUNAoGALNPCM75G7Z5/Auh/Tm/QMggeuq7n36uVRYEVKg3PB2qcUNSPpXZMeGKPvZaA+QRL6sAULnXG+02vB/ZsuC45adDtKuVoxGWuzry5WwyS/irRs96JYZKk6JDy6Gi7MDIaGwcX2dVgJa/LxeaUtk51s7TU6XYHuKBxx7AeDyMZUpcCgYEAvWF4o5ZiIn0vcVtzojRXgv2yPes/lVl3q932aV/95UjwMoDB/OZusiHyzU5uMb96Pd4UIE/LeDdC40jvMwky5VMLG1BBq/T/pDgoFB/OGwOms1QZyHXaqNNhP8ERm/Djh2hsD0o5DsaNqWeAjVAE0JfsfTIc+POFbI934hwtHb0CgYEAu0xdmmVf3uE0vrDoNA4cHSoPzupdFAXDv2G7NofJcOaNT9k6Zeut751jCN/bGlYmM3a0l/qBKmW/D/YP0NaLk3u1g5l8f3Rh+QwC3fCHcVAF/7ZFQJ5XhD90uXyXvv6qZFlD8Gq58vCmvg5HYyKnVIEhy25mDXrRyYVgnKEm9Ew="

# key = RSA.generate(2048)
# binPrivKey = key.exportKey('mykey2')
# binPubKey =  key.publickey().exportKey(pubkey)

# privKeyObj = RSA.importKey(binPrivKey)
f = open('mykey3','r')
privKeyObj =  RSA.importKey(f) # generate the RSA key object
f.close()
# f = open('mykey2','r')
# Crypto.PublicKey.RSA.import_key(RSA.import_key(f)


rsa_key_var_n = privKeyObj.n
rsa_key_var_e = privKeyObj.e
rsa_key_var_d = (privKeyObj.d)
rsa_key_var_p = (privKeyObj.p)
rsa_key_var_q = (privKeyObj.q)
rsa_key_var_u = (privKeyObj.u)

## ----- decrypt cuphertext then convert number back to a string
# decrypted = pow(ciphertext, rsa_key_var_d, rsa_key_var_n)   ## decrypt
plaintext = int2string(m1)
print (plaintext)

# print("the rsa key variable n is  : " + str(rsa_key_var_n))
# print("the rsa key variable e is  : " + str(rsa_key_var_e))
# print("the rsa key variable d is  : " + str(rsa_key_var_d))
# print("the rsa key variable p is  : " + str(rsa_key_var_p))
# print("the rsa key variable q is  : " + str(rsa_key_var_q))
# print("the rsa key variable u is  : " + str(rsa_key_var_u))
