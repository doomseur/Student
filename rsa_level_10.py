
import binascii
import gmpy2

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16)

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8")



from functools import reduce
def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod



def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

# copied from : https://www.rosettacode.org/wiki/Chinese_remainder_theorem#Python_3.6 that implement the chinese remainder theorem.


## -------------------------------------------------------------------------
n1 = 26810032903919470751417184091163731146806121331508070138277149500696322442971096175884120790304857828577982069290158633180100251942955342417542170410605715464381639432699234575800532573171123313101039133182999372766586273295415906566816349148163606213448711796691911721106409801179014678228860658715782559345893999568360161119880197256475135027884453469771185252450235587582025015666381441336406498311093901010840648225477283137781817222768955048218849523758778037997640541529505267901219992736813659659861269305793309604318766412566007430086799932995256182029067580771661764264766250121073118028809461680663575310081
e1 = 65537
n2 = 26810032903919470751417184091163731146806121331508070138277149500696322442971096175884120790304857828577982069290158633180100251942955342417542170410605715464381639432699234575800532573171123313101039133182999372766586273295415906566816349148163606213448711796691911721106409801179014678228860658715782559345893999568360161119880197256475135027884453469771185252450235587582025015666381441336406498311093901010840648225477283137781817222768955048218849523758778037997640541529505267901219992736813659659861269305793309604318766412566007430086799932995256182029067580771661764264766250121073118028809461680663575310081
e2 = 3



c1 = 7260766775102654657103431656742441990353148979141061124307181644983295046231107327430423691452627616157433441672231524455424228382285023845396142577444059128435224669183854573983185393024329156189822712662511116569420962360954623545400595204562408256820513940689193850920644698878217512292950416554931062728033829588894529471625359766244038958641807661419724452655415523369090378106418026735257613942016521972218694980364584576257654630239995015408104622801206625513029332885950345185037430856958499992603649288484209396652173200391934831459927051606716189209524840476734248211027925057233244321218681091073539258752
c2 = 11470173511333387826671287679003421156929670961823461275017682796745559415904602218760953321935593676675323236825060054973638032835676476860429091158485500015124230815770279169046878292335353131961947230502423954865968276122363702577392093721031987918924919887457819356718276460712079449251273113171432305369682840183450263334464494258055631111604123197495702165241358930802926382937042734028068862458721


# ## --------------------------------------------------------------------------
# BigCipher =  [c1,c2,c3]
# BigN = [n1,n2,n3]
# BigE = [e1,e2,e3]
#
#
# chinese_result = chinese_remainder(BigN,BigCipher)
cube_root = gmpy2.iroot(c2,e2)
print(cube_root)
print( int2string( cube_root[0] ) )
# cube_root = gmpy2.iroot(c1,e1)
# print(cube_root)
# print( int2string( cube_root[0] ) )



